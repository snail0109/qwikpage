{"version":3,"file":"Descriptions-CjHRGJNo.js","sources":["../../../packages/materials/Functional/Descriptions/Descriptions.tsx"],"sourcesContent":["import { ComponentType } from '@materials/types';\nimport { Button, Descriptions, Image, Tag, Tooltip, Typography } from 'antd';\nimport { forwardRef, useEffect, useImperativeHandle, useMemo, useState } from 'react';\nimport { handleApi } from '@materials/utils/handleApi';\nimport * as util from '@materials/utils/util';\nimport { handleActionFlow } from '@materials/utils/action';\nimport { usePageStore } from '@materials/stores/pageStore';\n\n/*泛型只需要定义组件本身用到的属性*/\nexport interface IConfig {\n  items: Array<{\n    key: string;\n    label: string;\n    name: string;\n    type: string;\n    ellipsis: boolean;\n    copyable: boolean;\n    clickable: boolean;\n    eventName: string;\n    render: string;\n    span?: number | object;\n  }>;\n  empty: string;\n}\n/**\n *\n * @param props 组件本身属性\n * @param style 组件样式\n * @returns\n */\nconst MButton = ({ id, type, config }: ComponentType<IConfig>, ref: any) => {\n  const [visible, setVisible] = useState(true);\n  const [data, setData] = useState<any[]>([]);\n  const variableData = usePageStore((state) => state.page.pageData.variableData);\n\n  useEffect(() => {\n    getDataList({});\n  }, [config.api, config.api?.sourceType == 'variable' ? variableData : '']);\n\n  // 列表加载\n  const getDataList = (params: any) => {\n    handleApi(config.api, params).then((res) => {\n      if (res?.code === 0) {\n        if (Array.isArray(res.data)) {\n          setData(res.data);\n        } else {\n          setData([res.data]);\n        }\n      }\n    });\n  };\n\n  // 对外暴露方法\n  useImperativeHandle(ref, () => {\n    return {\n      show() {\n        setVisible(true);\n      },\n      hide() {\n        setVisible(false);\n      },\n    };\n  });\n\n  // 表格行中的操作按钮点击\n  const handleActionClick = (eventName: string, record: any) => {\n    const btnEvent = config.events.find((event) => event.eventName === eventName);\n    handleActionFlow(btnEvent?.actions, record);\n  };\n\n  // 渲染内容\n  const renderChildren = (txt: any, item: any, record: any) => {\n    if (!util.isNotEmpty(txt)) {\n      if (typeof config.props.empty === 'undefined') {\n        txt = '-';\n      } else if (config.props.empty) {\n        txt = config.props.empty;\n      }\n    } else if (item.type === 'money') txt = util.formatNumber(txt, 'currency');\n    else if (item.type === 'number') txt = util.formatNumber(txt);\n    else if (item.type === 'date1') txt = util.formatDate(txt, 'YYYY-MM-DD');\n    else if (item.type === 'date2') txt = util.formatDate(txt);\n\n    // 文本处理完后，如果存在render，则执行render\n    if (item.render) {\n      try {\n        const renderFn = new Function('text', 'record', `return (${item.render})(text,record);`);\n        txt = renderFn(txt, record);\n      } catch (error) {\n        console.error(`列[${item.title}]渲染失败`, error);\n        txt = '解析异常';\n      }\n    }\n    if (item.type === 'text') {\n      // 提取公共组件\n      const ButtonComp = (\n        <Button type=\"link\" onClick={() => handleActionClick(item.eventName, record)}>\n          {txt.toString()}\n        </Button>\n      );\n      // 超出省略、可复制、可点击\n      if (item.ellipsis && item.copyable) {\n        return (\n          <Tooltip title={txt}>\n            <Typography.Paragraph copyable style={{ marginBottom: 0 }}>\n              {item.clickable ? ButtonComp : txt.toString()}\n            </Typography.Paragraph>\n          </Tooltip>\n        );\n      }\n      // 超出省略\n      if (item.ellipsis) return <Tooltip title={txt}>{item.clickable ? ButtonComp : txt.toString()}</Tooltip>;\n      // 可复制\n      if (item.copyable) {\n        return <Typography.Paragraph copyable>{item.clickable ? ButtonComp : txt.toString()}</Typography.Paragraph>;\n      }\n      return item.clickable ? (\n        <Button type=\"link\" onClick={() => handleActionClick(item.eventName, record)}>\n          {txt.toString()}\n        </Button>\n      ) : (\n        txt.toString()\n      );\n    }\n    if (item.type === 'image') return <Image src={txt} width={30} />;\n    if (item.type === 'tag') {\n      if (Array.isArray(txt)) {\n        return txt.map((tag) => <Tag key={tag}>{tag}</Tag>);\n      } else if (typeof txt === 'string' || typeof txt === 'number') {\n        return <Tag>{txt}</Tag>;\n      }\n      return txt?.toString();\n    }\n    return txt;\n  };\n\n  const items = useMemo(() => {\n    return config.props.items.map((item) => {\n      const txt = data[0]?.[item.name] || '';\n      const children = renderChildren(txt, item, data[0] || {});\n      return {\n        key: item.key,\n        label: item.label,\n        children,\n        span: item.span,\n      };\n    });\n  }, [config.props.items, data]);\n\n  return visible && <Descriptions {...config.props} items={items} data-id={id} data-type={type} style={config.style}></Descriptions>;\n};\nexport default forwardRef(MButton);\n"],"names":["MButton","id","type","config","ref","visible","setVisible","useState","data","setData","variableData","usePageStore","state","useEffect","getDataList","_a","params","handleApi","res","useImperativeHandle","handleActionClick","eventName","record","btnEvent","event","handleActionFlow","renderChildren","txt","item","util.isNotEmpty","util.formatNumber","util.formatDate","error","ButtonComp","jsx","Button","Tooltip","Typography","Image","tag","Tag","items","useMemo","children","Descriptions","forwardRef"],"mappings":"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"}