{"version":3,"file":"Form-BtW6-S3U.js","sources":["../../../packages/materials/Container/Form/Form.tsx"],"sourcesContent":["import { Form } from 'antd';\nimport { forwardRef, memo, useCallback, useImperativeHandle, useState } from 'react';\nimport { useShallow } from 'zustand/react/shallow';\nimport MarsRender from '@materials/MarsRender/MarsRender';\nimport { FormContext } from '@materials/utils/context';\nimport { usePageStore } from '@materials/stores/pageStore';\nimport { ComponentType } from '@materials/types';\nimport { dateFormat, getDateByType, getDateRangeByType, isNotEmpty } from '@materials/utils/util';\nimport dayjs from 'dayjs';\n/**\n *\n * @param props 组件本身属性\n * @param style 组件样式\n * @param attr 组件其它属性，比如：id、type、className\n * @returns\n */\nconst MForm = ({ id, config, elements, onFinish, onChange }: ComponentType, ref: any) => {\n  const [form] = Form.useForm();\n  const { formData, setFormData } = usePageStore(\n    useShallow((state) => {\n      return {\n        formData: state.page.pageData.formData,\n        setFormData: state.setFormData,\n      };\n    }),\n  );\n  const [visible, setVisible] = useState(true);\n  const [initialValues, setInitialValues] = useState({});\n\n  // 提交表单\n  const handleFinish = (values: any) => {\n    onFinish?.(dateFormat(elements, values));\n  };\n  // 监听表单值变化\n  const handleChange = (_: any, allValues: any) => {\n    const values = dateFormat(elements, allValues);\n    onChange?.(values);\n    setFormData({\n      name: id,\n      value: values,\n    });\n  };\n  // 对外暴露重置和获取值方法\n  useImperativeHandle(ref, () => {\n    return {\n      show() {\n        setVisible(true);\n      },\n      hide() {\n        setVisible(false);\n      },\n      reset() {\n        form.resetFields();\n        setFormData({\n          name: id,\n          value: form.getFieldsValue(),\n          type: 'override',\n        });\n      },\n      submit() {\n        form.submit();\n      },\n      async validate() {\n        try {\n          await form.validateFields();\n          return true;\n        } catch (error) {\n          console.error(error);\n          return false;\n        }\n      },\n      init(values: any = {}) {\n        const initData = dateFormat(elements, values);\n        form.setFieldsValue(initData);\n        setFormData({\n          name: id,\n          value: initData,\n          type: 'override',\n        });\n      },\n      getFormData(key: string) {\n        if (key && typeof key === 'string') {\n          return formData[id]?.[key];\n        }\n        return formData[id];\n      },\n    };\n  });\n\n  // 设置默认值\n  const initValues = useCallback((type: string, name: string, value: any) => {\n    if (name && isNotEmpty(value)) {\n      let initValue = value;\n      if (type === 'InputNumber') initValue = Number(value);\n      if (type === 'DatePicker') initValue = getDateByType(value);\n      if (type === 'DatePickerRange') initValue = getDateRangeByType(value);\n      if (type === 'TimePicker') initValue = dayjs(value, 'HH:mm:ss');\n      setInitialValues({ [name]: initValue });\n      form.setFieldValue([name], initValue);\n      setFormData({\n        name: id,\n        value: { [name]: initValue },\n      });\n    }\n  }, []);\n  return (\n    visible && (\n      <FormContext.Provider value={{ initValues }}>\n        <Form form={form} style={config.style} {...config.props} initialValues={initialValues} onFinish={handleFinish} onValuesChange={handleChange}>\n          <MarsRender elements={elements} />\n        </Form>\n      </FormContext.Provider>\n    )\n  );\n};\nexport default memo(forwardRef(MForm));\n"],"names":["MForm","id","config","elements","onFinish","onChange","ref","form","Form","formData","setFormData","usePageStore","useShallow","state","visible","setVisible","useState","initialValues","setInitialValues","handleFinish","values","dateFormat","handleChange","_","allValues","useImperativeHandle","error","initData","key","_a","initValues","useCallback","type","name","value","isNotEmpty","initValue","getDateByType","getDateRangeByType","dayjs","jsx","FormContext","MarsRender","memo","forwardRef"],"mappings":"2RAgBA,MAAMA,EAAQ,CAAC,CAAE,GAAAC,EAAI,OAAAC,EAAQ,SAAAC,EAAU,SAAAC,EAAU,SAAAC,CAAS,EAAkBC,IAAa,CACvF,KAAM,CAACC,CAAI,EAAIC,EAAK,QAAQ,EACtB,CAAE,SAAAC,EAAU,YAAAC,CAAA,EAAgBC,EAChCC,EAAYC,IACH,CACL,SAAUA,EAAM,KAAK,SAAS,SAC9B,YAAaA,EAAM,WACrB,EACD,CACH,EACM,CAACC,EAASC,CAAU,EAAIC,EAAAA,SAAS,EAAI,EACrC,CAACC,EAAeC,CAAgB,EAAIF,EAAAA,SAAS,CAAA,CAAE,EAG/CG,EAAgBC,GAAgB,CACzBhB,GAAA,MAAAA,EAAAiB,EAAWlB,EAAUiB,CAAM,EACxC,EAEME,EAAe,CAACC,EAAQC,IAAmB,CACzC,MAAAJ,EAASC,EAAWlB,EAAUqB,CAAS,EAC7CnB,GAAA,MAAAA,EAAWe,GACCV,EAAA,CACV,KAAMT,EACN,MAAOmB,CAAA,CACR,CACH,EAEAK,EAAA,oBAAoBnB,EAAK,KAChB,CACL,MAAO,CACLS,EAAW,EAAI,CACjB,EACA,MAAO,CACLA,EAAW,EAAK,CAClB,EACA,OAAQ,CACNR,EAAK,YAAY,EACLG,EAAA,CACV,KAAMT,EACN,MAAOM,EAAK,eAAe,EAC3B,KAAM,UAAA,CACP,CACH,EACA,QAAS,CACPA,EAAK,OAAO,CACd,EACA,MAAM,UAAW,CACX,GAAA,CACF,aAAMA,EAAK,eAAe,EACnB,SACAmB,EAAO,CACd,eAAQ,MAAMA,CAAK,EACZ,EAAA,CAEX,EACA,KAAKN,EAAc,GAAI,CACf,MAAAO,EAAWN,EAAWlB,EAAUiB,CAAM,EAC5Cb,EAAK,eAAeoB,CAAQ,EAChBjB,EAAA,CACV,KAAMT,EACN,MAAO0B,EACP,KAAM,UAAA,CACP,CACH,EACA,YAAYC,EAAa,OACnB,OAAAA,GAAO,OAAOA,GAAQ,UACjBC,EAAApB,EAASR,CAAE,IAAX,YAAA4B,EAAeD,GAEjBnB,EAASR,CAAE,CAAA,CAEtB,EACD,EAGD,MAAM6B,EAAaC,EAAA,YAAY,CAACC,EAAcC,EAAcC,IAAe,CACrE,GAAAD,GAAQE,EAAWD,CAAK,EAAG,CAC7B,IAAIE,EAAYF,EACZF,IAAS,gBAA2BI,EAAA,OAAOF,CAAK,GAChDF,IAAS,eAA0BI,EAAAC,EAAcH,CAAK,GACtDF,IAAS,oBAA+BI,EAAAE,EAAmBJ,CAAK,GAChEF,IAAS,eAA0BI,EAAAG,EAAML,EAAO,UAAU,GAC9DhB,EAAiB,CAAE,CAACe,CAAI,EAAGG,EAAW,EACtC7B,EAAK,cAAc,CAAC0B,CAAI,EAAGG,CAAS,EACxB1B,EAAA,CACV,KAAMT,EACN,MAAO,CAAE,CAACgC,CAAI,EAAGG,CAAU,CAAA,CAC5B,CAAA,CAEL,EAAG,EAAE,EAEH,OAAAtB,GACG0B,EAAA,IAAAC,EAAY,SAAZ,CAAqB,MAAO,CAAE,WAAAX,CAAW,EACxC,SAACU,EAAAA,IAAAhC,EAAA,CAAK,KAAAD,EAAY,MAAOL,EAAO,MAAQ,GAAGA,EAAO,MAAO,cAAAe,EAA8B,SAAUE,EAAc,eAAgBG,EAC7H,SAACkB,EAAAA,IAAAE,EAAA,CAAW,SAAAvC,CAAoB,CAAA,CAAA,CAClC,CACF,CAAA,CAGN,EACAK,EAAemC,OAAKC,EAAAA,WAAW5C,CAAK,CAAC"}